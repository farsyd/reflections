### Q1
When would you want to use a remote repository
rather than keeping all your work local?

-When multiple developers are collaborating on
  project.
-When I'm working from different locations using
  different machines.
-When I want others to use my work or see
  the results of my work.
  
### Q2
Why might you want to always pull changes manually
rather than having Git automatically stay up-to-date
with your remote repository?

I guess it's along the lines of why you'd prefer to 
do commits manually rather than have an auto-commit
feature. This way, the local code in your working 
directory doesn't get updated when you're in the 
middle of working on something very important.
Also, it allows you to view the commit history on 
GitHub and pull whatever you need.

### Q3
Describe the differences between forks, clones, and
branches. When would you use one instead of another?

Fork: When you want to make a copy of a repository on 
GitHub to your account.

Clone: When you want to copy a repository from a remote 
location to your local machine. Or when you want to make
copies locally.

Branch: When you want to try out something experimental
without affecting the main production-ready master.

### Q4
What is the benefit of having a copy of the last known
state of the remote stored locally?

This is so that if changes are made independently on both
the local and the remote, the local machine knows exactly
which commit we left off at when we were in-sync. So any
commits after that in either local or remote need to be 
reconciled. It would be harder if we didn't keep an
origin/master pointer on hand.

  

