### Q1

What happens when you initialize a repository? Why do you need
to do it?

When a repository is initialized using git init, a .git folder is created
in that directory. This folder probably contains all the information
git needs to keep track of changes moving forward.

If you don't initialize a repository, how in the world do you let
git come in and do its thing?


### Q2

How is the staging area different from the working directory
and the repository? What value do you think it offers?

You can't commit from the working directory. Commits have to be
from the staging area.

You can choose which files you would like git to track by
only placing those particular files in the staging area for the
git commit.

Maybe like one commit only has certain files, and another commit
has certain other files. Then when you rollback to a certain 
commit, then you will only have those files?

Or maybe if there are some really large image or video files
that you know aren't going to change or even if they change,
text-based git won't be particularly useful, then no need to 
waste storage on tracking those huge files?

### Q3

How can you use the staging area to make sure you have one commit
per logical change?

Not entirely sure here. But I'm thinking if you end up making many
changes to a single file you can add to the staging area after
one logical change, and then continue making changes to the 
working directory. This way, when you commit, you will only be
committing the first logical change that was already staged.

### Q4
What are some situations when branches would be helpful in 
keeping your history organized? How would branches help?

If you need to work on experimental features or 'nice-to-have'
bug fixes while keeping a working copy of code ready to ship
at all times, all changes can be done on secondary branches while
keeping the master branch production ready at all times.

Helps separate production-quality branches (which never break)
from developmental branches.

### Q5
How do the diagrams help you visualize the branch structure?

It helped me find out who has what head. And how many changes happened
in master while coin was being developed. And I also started to 
wonder if there would be any conflicts if coin was merged to master.
Like what if Sarah fixed some critical functionality, and then 
someone else also addressed that system issue on their branch.
When you merge, which fix will ultimately make it? 

Guess this will be covered when we look at merges.

### Q6

What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

The result is that the changes in both branches are incorporated
into a new commit in the branch that is currently checked out.

This diagram representation shows that commit history on both
erstwhile branches can still be accessed. And shows exactly which
head each commit has.

### Q7

What are the pros and cons of Git's automatic merging vs. always
doing it manually?

Pros of auto merging:
	-Most of the time when we're looking at branches doing different
		things, then auto merge is efficient.
	-No need to look through and figure out which lines need
		to be added where.

Cons of auto merging:
	-If two related changes were made in different parts of
		the code by two different people and the code is fine
		when running the individual changes, but merging the 
		two changes together could lead to undesirable solution.
	-Perhaps this is why anyone making a code change should
		always write clear commit statements, and commit once
		for every logical change.
	-So if someone wants to merge a branch and they see that a
		recent commit is addressing something similar to what
		they were also working on, then they can manually review
		the changes before auto merging to make sure no undesirable
		result is obtained.
		